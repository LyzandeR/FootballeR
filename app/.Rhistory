row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
second_header = list(c(3, 4, 6), c('col1', 'col2', 'col3'))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(3:34)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(3:34)) %>%
add_css_thead(css = list('text-align', 'center !important')) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
)}
)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
includeCSS('C:/css/www/mycss.css'),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(100, 140, rep(50, 11)),
row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
second_header = list(c(3, 4, 6), c('col1', 'col2', 'col3'))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(3:34)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(3:34)) %>%
add_css_thead(css = list('text-align', 'center !important')) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
)}
)
?add_css_header
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(100, 140, rep(50, 11)),
row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
second_header = list(c(3, 4, 6), c('col1', 'col2', 'col3'))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(3:34)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(3:34)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(100, 140, rep(50, 11)),
row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
add_css_row(css = list('background-color', 'lightgray'), rows = odd(3:34)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(3:34)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(100, 140, rep(50, 11))),
row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
add_css_row(css = list('background-color', 'lightgray'), rows = odd(3:34)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(3:34)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(100, 140, rep(50, 11))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(3:34)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(3:34)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(140, rep(50, 11))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(3:34)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(3:34)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(140, rep(50, 11))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(2:33)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(2:33)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
includeCSS('C:/css/www/mycss.css'),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(140, rep(50, 11))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(2:33)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(2:33)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
)}
)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
#includeCSS('C:/css/www/mycss.css'),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
tableHTML(mtcars,
border = 5,
rownames = TRUE,
widths = c(140, rep(50, 11))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(2:33)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(2:33)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
)}
)
library(cranlogs)
cran_downloads('tableHTML')
cran_downloads('tableHTML', 'last-week')
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
#includeCSS('C:/css/www/mycss.css'),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
tableHTML(mtcars,
class = 'text-center',
border = 5,
rownames = TRUE,
widths = c(140, rep(50, 11))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(2:33)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(2:33)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
)}
)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
includeCSS('C:/css/www/mycss.css'),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
tableHTML(mtcars,
class = 'text-center',
border = 5,
rownames = TRUE,
widths = c(140, rep(50, 11))) %>%
add_css_row(css = list('background-color', 'lightgray'), rows = odd(2:33)) %>%
add_css_row(css = list('background-color', 'lightblue'), rows = even(2:33)) %>%
add_css_header(css = list('text-align', 'center !important'), headers = names(mtcars)) %>%
add_css_column(css = list('background-color', 'white'), column_names = 'row_groups')
)}
)
cran_downloads('tableHTML')
cran_downloads('tableHTML', 'last-week')
25*25
library(cranlogs)
cran_downloads('tableHTML', 'last-week')
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
mtcars %>%
tableHTML(widths = c(140, rep(45, 11)),
second_header = list(c(3, 4, 5), c('team1', 'team2', 'team3'))) %>%
add_css_second_header(css = list(c('height', 'background-color', 'font-size', 'text-align'),
c('40px', ' #e6e6e6', '30px', 'center')),
second_headers = 1:3) %>%
add_css_header(css = list(c('height', 'background-color', 'text-align'),
c('30px', ' #e6e6e6', 'center')),
headers = 1:12) %>%
add_css_row(css = list('background-color', '#f2f2f2'),
rows = even(1:34)) %>%
add_css_row(css = list('background-color', '#e6f0ff'),
rows = odd(1:34)) %>%
add_css_column(css = list('text-align', 'center'),
column_names = names(mtcars))
)}
)
library(tableHTML)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
mtcars %>%
tableHTML(widths = c(140, rep(45, 11)),
second_header = list(c(3, 4, 5), c('team1', 'team2', 'team3'))) %>%
add_css_second_header(css = list(c('height', 'background-color', 'font-size', 'text-align'),
c('40px', ' #e6e6e6', '30px', 'center')),
second_headers = 1:3) %>%
add_css_header(css = list(c('height', 'background-color', 'text-align'),
c('30px', ' #e6e6e6', 'center')),
headers = 1:12) %>%
add_css_row(css = list('background-color', '#f2f2f2'),
rows = even(1:34)) %>%
add_css_row(css = list('background-color', '#e6f0ff'),
rows = odd(1:34)) %>%
add_css_column(css = list('text-align', 'center'),
column_names = names(mtcars))
)}
)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
mtcars %>%
tableHTML(widths = c(140, rep(45, 11)),
second_header = list(c(3, 4, 5), c('team1', 'team2', 'team3'))) %>%
add_css_second_header(css = list(c('height', 'background-color', 'font-size', 'text-align'),
c('40px', ' #e6e6e6', '30px', 'center')),
second_headers = 1:3) %>%
add_css_header(css = list(c('height', 'background-color', 'text-align'),
c('30px', ' #e6e6e6', 'center')),
headers = 1:12) %>%
add_css_row(css = list('background-color', '#f2f2f2'),
rows = even(1:34)) %>%
add_css_row(css = list('background-color', '#e6f0ff'),
rows = odd(1:34)) %>%
add_css_column(css = list('text-align', 'center'),
column_names = names(mtcars))
)}
)
str(mtcars)
library(tableHTML)
a <- data.frame(a = letters, b = 1:26)
a
str(a)
tableHTML(a)
3700 / 12
x <- seq(10)
x[seq(2,10,2)] <- NA
x <- ts(x)
x
x[!is.na(x)]
a <- x[!is.na(x)]
str(a)
a
index(x[!is.na(x)])
?index
?ts
??index
library(zoo)
?index
index(x[!is.na(x)])
methods('ts')
x#
index(x)
?window
x
na.omit.ts(x)
na.remove(x)
library(tseries)
install.packages('tseries')
library(tseries)
na.remove(x)
index(na.remove(x))
x
str(na.remove(x))
str(x)
class(x)
class(na.remove(x))
?dpois
library(cranlogs)
cran_downloads('tableHTML', 'last-week')
cran_downloads('tableHTML', 'last-month')
cran_downloads
df <- read.table(text = '             Friday Monday Saturday Sunday Thursday Tuesday Wednesday
Card         18167  18381    20068  18721    17604   18753     17826
Cash         13541  13100    13201  13510    13231   12865     13426
Discount     587    594      578    572      602     622       583', header = TRUE)
df
barplot(df)
barplot(df, beside = TRUE, legend = TRUE)
barplot(as.matrix(df), beside = TRUE, legend = TRUE)
x <- c("0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111",
"1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111")
x[order(sum(x))]
x[order(sum(as.numeric(x)))]
sort(x)
order(x)
x[order(as.numeric(x))]
x[order(as.numeric(x))]
order(as.numeric(x))
as.numeric(x)
library(IRanges)
install.packages('IRanges')
reverse
source("https://bioconductor.org/biocLite.R")
biocLite("IRanges")
library(IRanges)
x
'dbca'
a <- 'dbca'
reverse(a)
nchar(x, 'bytes')
?dist
dist(x, 'binary')
install.packages('stringdist')
library('stringdist')
stringdistmatrix(x)
a <- stringdistmatrix(x)
str(a)
a <- stringdistmatrix(x)
a[1]
a[10]
a[,1]
stringdistmatrix()
?stringdistmatrix()
sa
a
a[1:10]
a[1:length(x)]
which(x == '0000')
zeros <- which(x == '0000')
length(x)
x <- sort(x)
x
a <- stringdistmatrix(x)
a
a[16, ]
as.matrix(a)
a <- as.matrix(stringdistmatrix(x))[length(x), ]
a
x[rev(a)]
order(a)
x[order(a)]
x[rev(order(a))]
a
as.matrix(stringdistmatrix(x))
distances <- as.matrix(stringdistmatrix(x))[1, ]
x[order(distances)]
sessionInfo()
which.max(distances)
distances
which.max(as.matrix(stringdistmatrix(x)))
as.matrix(stringdistmatrix(x))
?which.max
stringdist(x)
stringdist(x, '0000')
distances <- stringdist(x, '0000')
x[order(distances)]
data("Boston",package="MASS")
library(neuralnet)
install.packages('neuralnet')
library(neuralnet)
data("Boston",package="MASS")
data <- Boston
str(data)
keeps <- c("crim", "indus", "nox", "rm" , "age", "dis", "tax" ,"ptratio", "lstat" ,"medv" )
data <- data[keeps]
str(data)
f <- medv ~ crim + indus + nox + rm + age + dis + tax + ptratio + lstat
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
train
fit<- neuralnet(f, data = data[train ,], hidden=c(10 ,12 ,20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold =0.1, linear.output=TRUE)
?neuralnet
library(cranlogs)
cran_downloads('tableHTML', 'last-week')
renderUI
renderUi
?renderUI
library(shiny)
?renderUI
renderUI
uiOutput
library(htmltools)
library(htmlwidgets)
?render
?renderUI
?markRenderFunction
?anyUnnamed
getAnywhere(anyUnnamed)
container
getAnywhere(container)
container
library(shiny)
getAnywhere(container)
?shinyRenderWidget
18*3
24*3
library(devtools)
install_github('lyzander/tableHTML')
library(tableHTML)
?render_tableHTML
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
column(width = 1),
tableHTML_output("mytable"))
),
server = function(input, output) {
output$mytable <- render_tableHTML(
tableHTML(mtcars)
)}
)
shinyApp(
ui = fluidPage(
fluidRow(
#leave some spacing
br(),
tags$style(make_css(list('tr:hover', 'background-color', 'lightyellow'))),
column(width = 1),
uiOutput("mytable"))
),
server = function(input, output) {
output$mytable <- renderUI(
tableHTML(mtcars, second_header = list(c(3, 4, 5), c('col1', 'col2', 'col3')))
)}
)
library(cranlogs)
cran_downloads('tableHTML', 'last-week')
library(cranlogs)
cran_downloads('tableHTML', 'last-week')
library(cranlogs)
cran_downloads('tableHTML', 'last-month')
library(data.table)
year(min(as.Date('2015-06-06')))
year(min(as.Date('2015-06-06'))) + 1
library(shiny)
runApp()
setwd('c:/github/tableHTML/')
runApp()
setwd('c:/github/Footballer/app/')
runApp()
runApp()
runApp()
install.packages('tableHTML')
?tableHTML
library(tableHTML)
?tableHTML
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ui_Output
?uiOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tag
runApp()
runApp()
?tableHTML
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
